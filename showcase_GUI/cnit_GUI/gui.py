#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Dec 07, 2017 04:43:40 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    gui_support.set_Tk_var()
    top = Demo_LORA_Traffic_Generator (root)
    gui_support.init(root, top)
    root.mainloop()

w = None
def create_Demo_LORA_Traffic_Generator(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    gui_support.set_Tk_var()
    top = Demo_LORA_Traffic_Generator (w)
    gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Demo_LORA_Traffic_Generator():
    global w
    w.destroy()
    w = None


class Demo_LORA_Traffic_Generator:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font11 = "-family {Segoe UI} -size 22 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1448x944+230+40")
        top.title("Demo LORA Traffic Generator")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="wheat")
        top.configure(highlightcolor="black")



        self.menubar = Menu(top,font=font9,bg='wheat',fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.file = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.file,
                activebackground="#d8d8d8",
                activeforeground="#111111",
                background="wheat",
                font="TkMenuFont",
                foreground="#000000",
                label="File")
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="wheat",
                command=gui_support.Save,
                font="TkMenuFont",
                foreground="#000000",
                label="Save")
        self.file.add_separator(
                background="wheat")
        self.file.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="wheat",
                command=gui_support.Quit,
                font="TkMenuFont",
                foreground="#000000",
                label="Quit")
        self.edit = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.edit,
                activebackground="#d8d8d8",
                activeforeground="#111111",
                background="wheat",
                font="TkMenuFont",
                foreground="#000000",
                label="Edit")


        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.0, rely=0.11, relheight=0.88, relwidth=0.99)
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(width=1435)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.tFr39_tNo40 = ttk.Notebook(self.TFrame1)
        self.tFr39_tNo40.place(relx=0.01, rely=0.01, relheight=0.96
                , relwidth=0.98)
        self.tFr39_tNo40.configure(width=1405)
        self.TNotebook1_t1 = ttk.Frame(self.tFr39_tNo40)
        self.tFr39_tNo40.add(self.TNotebook1_t1, padding=3)
        self.tFr39_tNo40.tab(0, text="Error Detection",underline="-1",)
        self.TNotebook1_t2 = ttk.Frame(self.tFr39_tNo40)
        self.tFr39_tNo40.add(self.TNotebook1_t2, padding=3)
        self.tFr39_tNo40.tab(1, text="Spectral Scan",underline="-1",)
        self.TNotebook1_t3 = ttk.Frame(self.tFr39_tNo40)
        self.tFr39_tNo40.add(self.TNotebook1_t3, padding=3)
        self.tFr39_tNo40.tab(2, text="USRP Conf",underline="-1",)
        self.TNotebook1_t4 = ttk.Frame(self.tFr39_tNo40)
        self.tFr39_tNo40.add(self.TNotebook1_t4, padding=3)
        self.tFr39_tNo40.tab(3, text="Gateway Conf",underline="-1",)

        self.LabelframeTopology = LabelFrame(self.TNotebook1_t1)
        self.LabelframeTopology.place(relx=0.02, rely=0.01, relheight=0.42
                , relwidth=0.36)
        self.LabelframeTopology.configure(relief=GROOVE)
        self.LabelframeTopology.configure(foreground="black")
        self.LabelframeTopology.configure(text='''Topology''')
        self.LabelframeTopology.configure(background="#d9d9d9")
        self.LabelframeTopology.configure(highlightbackground="#d9d9d9")
        self.LabelframeTopology.configure(highlightcolor="black")
        self.LabelframeTopology.configure(width=500)

        self.LabelTopologyImage = Label(self.LabelframeTopology)
        self.LabelTopologyImage.place(relx=0.01, rely=0.06, height=271
                , width=464)
        self.LabelTopologyImage.configure(activebackground="#f9f9f9")
        self.LabelTopologyImage.configure(activeforeground="black")
        self.LabelTopologyImage.configure(background="#d9d9d9")
        self.LabelTopologyImage.configure(disabledforeground="#a3a3a3")
        self.LabelTopologyImage.configure(foreground="#000000")
        self.LabelTopologyImage.configure(highlightbackground="#d9d9d9")
        self.LabelTopologyImage.configure(highlightcolor="black")
        self._img1 = PhotoImage(file="./topology_final.png")
        self.LabelTopologyImage.configure(image=self._img1)

        self.LabelframeMonitor = LabelFrame(self.TNotebook1_t1)
        self.LabelframeMonitor.place(relx=0.02, rely=0.67, relheight=0.32
                , relwidth=0.97)
        self.LabelframeMonitor.configure(relief=GROOVE)
        self.LabelframeMonitor.configure(foreground="black")
        self.LabelframeMonitor.configure(text='''Channel Time''')
        self.LabelframeMonitor.configure(background="#d9d9d9")
        self.LabelframeMonitor.configure(highlightbackground="#d9d9d9")
        self.LabelframeMonitor.configure(highlightcolor="black")
        self.LabelframeMonitor.configure(width=1360)

        self.LabelframeDetection1 = LabelFrame(self.TNotebook1_t1)
        self.LabelframeDetection1.place(relx=0.55, rely=0.01, relheight=0.42
                , relwidth=0.44)
        self.LabelframeDetection1.configure(relief=GROOVE)
        self.LabelframeDetection1.configure(foreground="black")
        self.LabelframeDetection1.configure(text='''Technology Detection''')
        self.LabelframeDetection1.configure(background="#d9d9d9")
        self.LabelframeDetection1.configure(highlightbackground="#d9d9d9")
        self.LabelframeDetection1.configure(highlightcolor="black")
        self.LabelframeDetection1.configure(width=620)

        self.LabelframeController = LabelFrame(self.TNotebook1_t1)
        self.LabelframeController.place(relx=0.39, rely=0.01, relheight=0.42
                , relwidth=0.16)
        self.LabelframeController.configure(relief=GROOVE)
        self.LabelframeController.configure(foreground="black")
        self.LabelframeController.configure(text='''Controller''')
        self.LabelframeController.configure(background="#d9d9d9")
        self.LabelframeController.configure(highlightbackground="#d9d9d9")
        self.LabelframeController.configure(highlightcolor="black")
        self.LabelframeController.configure(width=220)

        self.RadiobuttonRadiobuttonWifiOn = Radiobutton(self.LabelframeController)
        self.RadiobuttonRadiobuttonWifiOn.place(relx=0.68, rely=0.09
                , relheight=0.08, relwidth=0.25)
        self.RadiobuttonRadiobuttonWifiOn.configure(activebackground="#f4bcb2")
        self.RadiobuttonRadiobuttonWifiOn.configure(activeforeground="black")
        self.RadiobuttonRadiobuttonWifiOn.configure(background="#d9d9d9")
        self.RadiobuttonRadiobuttonWifiOn.configure(disabledforeground="#a3a3a3")
        self.RadiobuttonRadiobuttonWifiOn.configure(foreground="#000000")
        self.RadiobuttonRadiobuttonWifiOn.configure(highlightbackground="#d9d9d9")
        self.RadiobuttonRadiobuttonWifiOn.configure(highlightcolor="black")
        self.RadiobuttonRadiobuttonWifiOn.configure(indicatoron="0")
        self.RadiobuttonRadiobuttonWifiOn.configure(justify=LEFT)
        self.RadiobuttonRadiobuttonWifiOn.configure(text='''On''')
        self.RadiobuttonRadiobuttonWifiOn.configure(value="1")
        self.RadiobuttonRadiobuttonWifiOn.configure(variable=gui_support.wifiActivation)

        self.RadiobuttonWifiOff = Radiobutton(self.LabelframeController)
        self.RadiobuttonWifiOff.place(relx=0.39, rely=0.09, relheight=0.08
                , relwidth=0.26)
        self.RadiobuttonWifiOff.configure(activebackground="#f4bcb2")
        self.RadiobuttonWifiOff.configure(activeforeground="black")
        self.RadiobuttonWifiOff.configure(background="#d9d9d9")
        self.RadiobuttonWifiOff.configure(disabledforeground="#a3a3a3")
        self.RadiobuttonWifiOff.configure(foreground="#000000")
        self.RadiobuttonWifiOff.configure(highlightbackground="#d9d9d9")
        self.RadiobuttonWifiOff.configure(highlightcolor="black")
        self.RadiobuttonWifiOff.configure(indicatoron="0")
        self.RadiobuttonWifiOff.configure(justify=LEFT)
        self.RadiobuttonWifiOff.configure(text='''Off''')
        self.RadiobuttonWifiOff.configure(value="0")
        self.RadiobuttonWifiOff.configure(variable=gui_support.wifiActivation)

        self.LabelWiFi = Label(self.LabelframeController)
        self.LabelWiFi.place(relx=0.14, rely=0.09, height=21, width=29)
        self.LabelWiFi.configure(activebackground="#f9f9f9")
        self.LabelWiFi.configure(activeforeground="black")
        self.LabelWiFi.configure(background="#d9d9d9")
        self.LabelWiFi.configure(disabledforeground="#a3a3a3")
        self.LabelWiFi.configure(foreground="#000000")
        self.LabelWiFi.configure(highlightbackground="#d9d9d9")
        self.LabelWiFi.configure(highlightcolor="black")
        self.LabelWiFi.configure(text='''WiFi''')

        self.LabelLte = Label(self.LabelframeController)
        self.LabelLte.place(relx=0.14, rely=0.28, height=21, width=29)
        self.LabelLte.configure(activebackground="#f9f9f9")
        self.LabelLte.configure(activeforeground="black")
        self.LabelLte.configure(background="#d9d9d9")
        self.LabelLte.configure(disabledforeground="#a3a3a3")
        self.LabelLte.configure(foreground="#000000")
        self.LabelLte.configure(highlightbackground="#d9d9d9")
        self.LabelLte.configure(highlightcolor="black")
        self.LabelLte.configure(text='''LTE''')

        self.RadiobuttonLteOff = Radiobutton(self.LabelframeController)
        self.RadiobuttonLteOff.place(relx=0.39, rely=0.28, relheight=0.08
                , relwidth=0.26)
        self.RadiobuttonLteOff.configure(activebackground="#f4bcb2")
        self.RadiobuttonLteOff.configure(activeforeground="black")
        self.RadiobuttonLteOff.configure(background="#d9d9d9")
        self.RadiobuttonLteOff.configure(disabledforeground="#a3a3a3")
        self.RadiobuttonLteOff.configure(foreground="#000000")
        self.RadiobuttonLteOff.configure(highlightbackground="#d9d9d9")
        self.RadiobuttonLteOff.configure(highlightcolor="black")
        self.RadiobuttonLteOff.configure(indicatoron="0")
        self.RadiobuttonLteOff.configure(justify=LEFT)
        self.RadiobuttonLteOff.configure(text='''Off''')
        self.RadiobuttonLteOff.configure(value="0")
        self.RadiobuttonLteOff.configure(variable=gui_support.lteActivation)

        self.RadiobuttonLteOn = Radiobutton(self.LabelframeController)
        self.RadiobuttonLteOn.place(relx=0.68, rely=0.28, relheight=0.08
                , relwidth=0.25)
        self.RadiobuttonLteOn.configure(activebackground="#f4bcb2")
        self.RadiobuttonLteOn.configure(activeforeground="black")
        self.RadiobuttonLteOn.configure(background="#d9d9d9")
        self.RadiobuttonLteOn.configure(disabledforeground="#a3a3a3")
        self.RadiobuttonLteOn.configure(foreground="#000000")
        self.RadiobuttonLteOn.configure(highlightbackground="#d9d9d9")
        self.RadiobuttonLteOn.configure(highlightcolor="black")
        self.RadiobuttonLteOn.configure(indicatoron="0")
        self.RadiobuttonLteOn.configure(justify=LEFT)
        self.RadiobuttonLteOn.configure(text='''On''')
        self.RadiobuttonLteOn.configure(value="1")
        self.RadiobuttonLteOn.configure(variable=gui_support.lteActivation)

        self.LabelframeLog = LabelFrame(self.TNotebook1_t1)
        self.LabelframeLog.place(relx=0.02, rely=0.44, relheight=0.23
                , relwidth=0.97)
        self.LabelframeLog.configure(relief=GROOVE)
        self.LabelframeLog.configure(foreground="black")
        self.LabelframeLog.configure(text='''Solution Global Controller LOG''')
        self.LabelframeLog.configure(background="#d9d9d9")
        self.LabelframeLog.configure(width=1360)

        self.ListboxLog = Listbox(self.LabelframeLog)
        self.ListboxLog.place(relx=0.01, rely=0.11, relheight=0.81
                , relwidth=0.97)
        self.ListboxLog.configure(background="white")
        self.ListboxLog.configure(disabledforeground="#a3a3a3")
        self.ListboxLog.configure(font=font10)
        self.ListboxLog.configure(foreground="#000000")
        self.ListboxLog.configure(width=1324)

        self.LabelframeWaterFall = LabelFrame(self.TNotebook1_t2)
        self.LabelframeWaterFall.place(relx=0.01, rely=0.01, relheight=0.83
                , relwidth=0.99)
        self.LabelframeWaterFall.configure(relief=GROOVE)
        self.LabelframeWaterFall.configure(foreground="black")
        self.LabelframeWaterFall.configure(text='''Spectral''')
        self.LabelframeWaterFall.configure(background="#d9d9d9")
        self.LabelframeWaterFall.configure(highlightbackground="#d9d9d9")
        self.LabelframeWaterFall.configure(highlightcolor="black")
        self.LabelframeWaterFall.configure(width=1380)

        self.GatewayConfFrame = LabelFrame(self.TNotebook1_t4)
        self.GatewayConfFrame.place(relx=0.01, rely=0.01, relheight=0.41
                , relwidth=0.66)
        self.GatewayConfFrame.configure(relief=GROOVE)
        self.GatewayConfFrame.configure(foreground="black")
        self.GatewayConfFrame.configure(text='''Gateway Conf''')
        self.GatewayConfFrame.configure(background="#d9d9d9")
        self.GatewayConfFrame.configure(highlightbackground="#d9d9d9")
        self.GatewayConfFrame.configure(highlightcolor="black")
        self.GatewayConfFrame.configure(width=920)

        self.FileDialogButton = Button(self.GatewayConfFrame)
        self.FileDialogButton.place(relx=0.6, rely=0.16, height=24, width=51)
        self.FileDialogButton.configure(activebackground="#f4bcb2")
        self.FileDialogButton.configure(activeforeground="black")
        self.FileDialogButton.configure(background="#d9d9d9")
        self.FileDialogButton.configure(command=gui_support.OpenFileDialog)
        self.FileDialogButton.configure(disabledforeground="#a3a3a3")
        self.FileDialogButton.configure(foreground="#000000")
        self.FileDialogButton.configure(highlightbackground="#d9d9d9")
        self.FileDialogButton.configure(highlightcolor="black")
        self.FileDialogButton.configure(pady="0")
        self.FileDialogButton.configure(text='''Select...''')

        self.SelectGatewayFileLabel = Label(self.GatewayConfFrame)
        self.SelectGatewayFileLabel.place(relx=0.03, rely=0.16, height=21
                , width=124)
        self.SelectGatewayFileLabel.configure(activebackground="#f9f9f9")
        self.SelectGatewayFileLabel.configure(activeforeground="black")
        self.SelectGatewayFileLabel.configure(background="#d9d9d9")
        self.SelectGatewayFileLabel.configure(disabledforeground="#a3a3a3")
        self.SelectGatewayFileLabel.configure(foreground="#000000")
        self.SelectGatewayFileLabel.configure(highlightbackground="#d9d9d9")
        self.SelectGatewayFileLabel.configure(highlightcolor="black")
        self.SelectGatewayFileLabel.configure(text='''Select Gateway File''')

        self.StartGatewayButton = Button(self.GatewayConfFrame)
        self.StartGatewayButton.place(relx=0.04, rely=0.29, height=24, width=167)

        self.StartGatewayButton.configure(activebackground="#f4bcb2")
        self.StartGatewayButton.configure(activeforeground="black")
        self.StartGatewayButton.configure(background="#d9d9d9")
        self.StartGatewayButton.configure(command=gui_support.StartGatewayCommand)
        self.StartGatewayButton.configure(disabledforeground="#a3a3a3")
        self.StartGatewayButton.configure(foreground="#000000")
        self.StartGatewayButton.configure(highlightbackground="#d9d9d9")
        self.StartGatewayButton.configure(highlightcolor="black")
        self.StartGatewayButton.configure(pady="0")
        self.StartGatewayButton.configure(text='''Start Gateway''')

        self.StopGatewayButton = Button(self.GatewayConfFrame)
        self.StopGatewayButton.place(relx=0.26, rely=0.29, height=24, width=167)
        self.StopGatewayButton.configure(activebackground="#f4bcb2")
        self.StopGatewayButton.configure(activeforeground="black")
        self.StopGatewayButton.configure(background="#d9d9d9")
        self.StopGatewayButton.configure(command=gui_support.StopGatewayCommand)
        self.StopGatewayButton.configure(disabledforeground="#a3a3a3")
        self.StopGatewayButton.configure(foreground="#000000")
        self.StopGatewayButton.configure(highlightbackground="#d9d9d9")
        self.StopGatewayButton.configure(highlightcolor="black")
        self.StopGatewayButton.configure(pady="0")
        self.StopGatewayButton.configure(text='''Stop Gateway''')

        self.GatewayFilePathEntry = Entry(self.GatewayConfFrame)
        self.GatewayFilePathEntry.place(relx=0.17, rely=0.16, relheight=0.06
                , relwidth=0.41)
        self.GatewayFilePathEntry.configure(background="white")
        self.GatewayFilePathEntry.configure(disabledforeground="#a3a3a3")
        self.GatewayFilePathEntry.configure(font="TkFixedFont")
        self.GatewayFilePathEntry.configure(foreground="#000000")
        self.GatewayFilePathEntry.configure(highlightbackground="#d9d9d9")
        self.GatewayFilePathEntry.configure(highlightcolor="black")
        self.GatewayFilePathEntry.configure(insertbackground="black")
        self.GatewayFilePathEntry.configure(selectbackground="#c4c4c4")
        self.GatewayFilePathEntry.configure(selectforeground="black")

        self.TSizegrip1 = ttk.Sizegrip(top)
        self.TSizegrip1.place(anchor=SE, relx=1.0, rely=1.0)

        self.LabelDemoTitle = Label(top)
        self.LabelDemoTitle.place(relx=0.36, rely=0.04, height=31, width=434)
        self.LabelDemoTitle.configure(activebackground="#ffffff")
        self.LabelDemoTitle.configure(activeforeground="black")
        self.LabelDemoTitle.configure(background="#ffffff")
        self.LabelDemoTitle.configure(disabledforeground="#a3a3a3")
        self.LabelDemoTitle.configure(font=font11)
        self.LabelDemoTitle.configure(foreground="#000000")
        self.LabelDemoTitle.configure(highlightbackground="#d9d9d9")
        self.LabelDemoTitle.configure(highlightcolor="black")
        self.LabelDemoTitle.configure(text='''Interference Recognition''')

        self.Label1 = Label(top)
        self.Label1.place(relx=0.06, rely=-0.01, height=109, width=386)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self._img2 = PhotoImage(file="./logo_wishful.png")
        self.Label1.configure(image=self._img2)
        self.Label1.configure(text='''Label''')

        self.Label2 = Label(top)
        self.Label2.place(relx=0.65, rely=0.0, height=82, width=392)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self._img3 = PhotoImage(file="./logo_cnit2.png")
        self.Label2.configure(image=self._img3)
        self.Label2.configure(text='''Label''')






if __name__ == '__main__':
    vp_start_gui()



